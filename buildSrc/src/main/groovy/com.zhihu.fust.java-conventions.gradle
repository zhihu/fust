/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco-report-aggregation'
    id 'checkstyle'
    id 'signing'
}

checkstyle {
    configDirectory = file("$rootProject.projectDir/settings/checkstyle")
}

repositories {
    maven {
        url = uri('https://maven.aliyun.com/repository/public')
    }
    mavenCentral()
    mavenLocal()
}

java.targetCompatibility = JavaVersion.VERSION_17
java.sourceCompatibility = JavaVersion.VERSION_17

dependencies {
    api platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    api platform("com.linecorp.armeria:armeria-bom:${armeriaVersion}")
    api platform("io.netty:netty-bom:${nettyVersion}")
    api platform("io.opentelemetry:opentelemetry-bom:${opentelemetryVersion}")
    api platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:${opentelemetryAlphaVersion}")
    api 'org.slf4j:slf4j-api'
    api "jakarta.annotation:jakarta.annotation-api"
    api "com.google.code.findbugs:jsr305:3.0.2"
    // unit test
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation 'uk.org.webcompere:system-stubs-jupiter:2.1.7'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation 'org.slf4j:slf4j-simple:2.0.16'
}

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        author = true
        version = true
        links = ['https://docs.oracle.com/en/java/javase/17/docs/api/']
        if (JavaVersion.current().isJava9Compatible()) {
            addBooleanOption('html5', true)
        }
        // 添加自定义标签
        tags = [
                'date:a:Date',
                'apiNote:a:API Note:',
                'implNote:a:Implementation Note:'
        ]
        // 忽略一些警告
        addStringOption('Xdoclint:none', '-quiet')
    }
    // 忽略 Javadoc 错误
    failOnError = false
}

tasks.named('test') {
    useJUnitPlatform()
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11)) {
        jvmArgs('--illegal-access=permit')
        jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')
        jvmArgs('--add-opens', 'java.base/java.util=ALL-UNNAMED')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            version = project.version
            from(components.java)
            pom {
                name = project.name
                description = 'FUST - A Java Microservice Framework'
                url = 'https://github.com/zhihu/fust'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'zhihu'
                        email = 'opensource@zhihu.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/zhihu/fust.git'
                    developerConnection = 'scm:git:ssh://github.com/zhihu/fust.git'
                    url = 'https://github.com/zhihu/fust'
                }
            }
        }
    }
    repositories {
        maven {
            url = uri(projectDir.getAbsolutePath() + stagingDeployDir)
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    def signingKey = System.getenv("GPG_SIGNING_KEY")
    def signingPassword = System.getenv("GPG_SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

