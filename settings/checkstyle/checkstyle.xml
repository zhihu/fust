<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <module name="SuppressionFilter">
        <property name="file" value="${config_loc}/checkstyle-suppressions.xml"/>
    </module>

    <!-- 过滤掉不应该执行解析的文件 -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value=".*[\\/]gen-src[\\/].*$"/>
    </module>
    <!-- 过滤掉不应该执行解析的文件 -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value=".*[\\/]build[\\/]generated[\\/].*$"/>
    </module>
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="GrpcBizError.java"/>
    </module>
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="GrpcErrorProto.java"/>
    </module>

    <!-- 文件长度不超 1000 行 -->
    <module name="FileLength">
        <property name="max" value="1000"/>
    </module>
    <!-- 每行不超过 120 个字符-->
    <module name="LineLength">
        <property name="max" value="200"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

    <module name="TreeWalker">
        <!-- import 检查-->
        <!-- 检查是否从非法的包中导入了类 -->
        <module name="IllegalImport"/>
        <!-- 检查是否导入了多余的包 -->
        <module name="RedundantImport"/>
        <!-- 没用的 import 检查，比如：1.没有被用到 2.重复的 3.import java.lang的 4.import 与该类在同一个 package 的 -->
        <module name="UnusedImports"/>

        <!-- 命名风格检查 -->
        <!-- 局部的 final 变量，包括 catch 中的参数的检查 -->
        <module name="LocalFinalVariableName"/>
        <!-- 局部的非 final 型的变量，包括 catch 中的参数的检查 -->
        <module name="LocalVariableName"/>
        <!-- 包名的检查（只允许小写字母），默认^[a-z]+(\.[a-zA-Z_][a-zA-Z_0-9_]*)*$ -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="包名 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 仅仅是 static 型的变量（不包括 static final 型）的检查 -->
        <module name="StaticVariableName"/>
        <!-- Class 或 Interface 名检查，默认^[A-Z][a-zA-Z0-9]*$-->
        <module name="TypeName">
            <property name="severity" value="warning"/>
            <message key="name.invalidPattern" value="名称 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 非 static 型变量的检查 -->
        <!-- <module name="MemberName" /> -->
        <!-- 方法名的检查 -->
        <module name="MethodName"/>
        <!-- 方法的参数名 -->
        <module name="ParameterName"/>
        <!-- 常量名的检查（只允许大写），默认^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$ -->
        <!--        <module name="ConstantName" />-->
        <!-- 检查数组类型定义的样式 -->
        <module name="ArrayTypeStyle"/>
        <!-- 检查 long 型定义是否有大写的 “L” -->
        <module name="UpperEll"/>

        <!-- 检查在重写了 equals 方法后是否重写了 hashCode 方法 -->
        <module name="EqualsHashCode"/>
        <!-- 检查局部变量或参数是否隐藏了类中的变量 -->
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <!-- 检查是否使用工厂方法实例化 -->
        <module name="IllegalInstantiation"/>
        <!-- 检查子表达式中是否有赋值操作 -->
        <module name="InnerAssignment"/>
        <!-- 检查是否有"魔术"数字 -->
        <!--        <module name="MagicNumber">-->
        <!--            &lt;!&ndash; 过滤掉 0、1、常用端口号 &ndash;&gt;-->
        <!--            <property name="ignoreNumbers" value="0, 1, 8080, 8888"/>-->
        <!--            <property name="ignoreAnnotation" value="true"/>-->
        <!--        </module>-->
        <!-- 检查 switch 语句是否有 default -->
        <module name="MissingSwitchDefault"/>
        <!-- 检查是否有过度复杂的布尔表达式 -->
        <module name="SimplifyBooleanExpression"/>
        <!-- 检查是否有过于复杂的布尔返回代码段 -->
        <module name="SimplifyBooleanReturn"/>

        <!-- 代码格式 -->
        <!-- 方法名后跟左圆括号"(" -->
        <module name="MethodParamPad"/>
        <!-- 在类型转换时，不允许左圆括号右边有空格，也不允许与右圆括号左边有空格 -->
        <module name="TypecastParenPad"/>
        <!-- 检查在某个特定关键字之后应保留空格 -->
        <module name="NoWhitespaceAfter"/>
        <!-- 检查在某个特定关键字之前应保留空格 -->
        <module name="NoWhitespaceBefore"/>
        <!-- 操作符换行策略检查 -->
        <!--        <module name="OperatorWrap"/>-->
        <!-- 圆括号空白 -->
        <module name="ParenPad"/>
        <!-- 检查分隔符是否在空白之后 -->
        <module name="WhitespaceAfter"/>

        <!-- 检查修饰符的顺序是否遵照 java 语言规范 -->
        <module name="ModifierOrder"/>
        <!-- 检查接口和 annotation 中是否有多余修饰符，如接口方法不必使用 public -->
        <module name="RedundantModifier"/>

        <!-- 检查是否有嵌套代码块 -->
        <module name="AvoidNestedBlocks"/>
        <!-- 检查是否有空代码块 -->
        <module name="EmptyBlock"/>
        <!-- 检查左大括号位置 -->
        <module name="LeftCurly"/>
        <!-- 检查代码块是否缺失{} -->
        <module name="NeedBraces"/>
        <!-- 检查右大括号位置 -->
        <module name="RightCurly"/>
        <!-- 检查空的代码段 -->
        <module name="EmptyStatement"/>

        <!-- 类设计检查 -->
        <!-- 检查只有 private 构造函数的类是否声明为 final -->
        <module name="FinalClass"/>
        <!-- 检查工具类是否有 public 的构造器 -->
        <!-- <module name="HideUtilityClassConstructor"/> -->
        <!-- 检查接口是否仅定义类型 -->
        <module name="InterfaceIsType"/>
        <!-- 检查类成员的可见度 -->
        <!-- <module name="VisibilityModifier"> -->
        <!-- <property name="packageAllowed" value="true"/> -->
        <!-- <property name="protectedAllowed" value="true"/> -->
        <!-- </module> -->
        <!--  -->
        <!-- size 检查 -->
        <!-- 方法不超过 50 行 -->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF"/>
            <property name="max" value="200"/>
        </module>
        <!-- 方法的参数个数不超过 5 个。 并且不对构造方法进行检查-->
        <module name="ParameterNumber">
            <property name="max" value="10"/>
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>
        <!-- lambda 方法体最多 10 行 -->
        <!--        <module name="LambdaBodyLength"/>-->

        <!-- 语法 -->
        <!-- String的比较不能用!= 和 == -->
        <module name="StringLiteralEquality"/>
        <!-- 限制for循环最多嵌套2层 -->
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>
        <!-- if 最多嵌套 3 层 -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <!-- 检查未被注释的 main 方法,排除以 Application 结尾命名的类 -->
        <module name="UncommentedMain">
            <property name="excludedClasses" value=".*(Application|Main)$"/>
        </module>
        <!-- 禁止使用 System.out.println -->
        <module name="Regexp">
            <property name="format" value="System\.out\.println"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <!-- return 个数 3 个-->
        <module name="ReturnCount">
            <property name="maxForVoid" value="10"/>
            <property name="max" value="10"/>
        </module>
        <!-- try catch 异常处理数量 3-->
        <module name="NestedTryDepth ">
            <property name="max" value="3"/>
        </module>
        <!-- clone 方法必须调用了 super.clone() -->
        <module name="SuperClone"/>
        <!-- finalize 必须调用了 super.finalize() -->
        <module name="SuperFinalize"/>
    </module>
</module>